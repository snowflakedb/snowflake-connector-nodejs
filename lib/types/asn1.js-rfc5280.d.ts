import BN from 'bn.js';

// NOTE:
// These definitions only cover the methods currently used in TypeScript codebase
// Mostly generated by AI
declare module 'asn1.js-rfc5280' {
  type DEREncoding = 'der' | 'pem';

  interface AlgorithmIdentifier {
    algorithm: number[];
    parameters?: any;
  }

  type BaseExtension<TId extends string, TValue> = {
    extnID: TId;
    extnValue: TValue;
  };

  export type UnknownExtension = BaseExtension<string, unknown>;

  export type CrlDistributionPointsExtension = BaseExtension<
    'cRLDistributionPoints',
    {
      distributionPoint?: {
        type: 'fullName';
        value: {
          type: 'uniformResourceIdentifier' | 'dNSName';
          value: string;
        }[];
      };
    }[]
  >;

  export type IssuingDistributionPointExtension = BaseExtension<
    'issuingDistributionPoint',
    {
      distributionPoint: {
        type: 'fullName';
        value: {
          type: 'uniformResourceIdentifier' | 'dNSName';
          value: string;
        }[];
      };
      onlyContainsUserCerts?: boolean;
      onlyContainsCACerts?: boolean;
      indirectCRL?: boolean;
      onlyContainsAttributeCerts?: boolean;
    }
  >;

  type Time = { type: 'utcTime' | 'generalTime'; value: number };

  interface BitString {
    unused: number;
    data: Buffer;
  }

  interface SubjectPublicKeyInfo {
    algorithm: AlgorithmIdentifier;
    subjectPublicKey: BitString;
  }

  export interface NameRDNSequence {
    type: 'rdnSequence';
    value: any[];
  }

  interface Validity {
    notBefore: Time;
    notAfter: Time;
  }

  export interface TBSCertificate {
    version?: string;
    serialNumber: BN;
    signature: AlgorithmIdentifier;
    issuer: NameRDNSequence;
    validity: Validity;
    subject: NameRDNSequence;
    subjectPublicKeyInfo: SubjectPublicKeyInfo;
    extensions?: (CrlDistributionPointsExtension | UnknownExtension)[];
  }

  export interface TBSCertList {
    version?: BN;
    signature: AlgorithmIdentifier;
    issuer: any;
    thisUpdate: Time;
    nextUpdate: Time;
    revokedCertificates: {
      userCertificate: BN;
      revocationDate: Time;
      crlEntryExtensions?: Extension[];
    }[];
    crlExtensions?: (IssuingDistributionPointExtension | UnknownExtension)[];
  }

  export interface CertificateDecoded {
    tbsCertificate: TBSCertificate;
    signatureAlgorithm: AlgorithmIdentifier;
    signature: BitString;
  }

  export interface CertificateListDecoded {
    tbsCertList: TBSCertList;
    signatureAlgorithm: AlgorithmIdentifier;
    signature: BitString;
  }

  interface Asn1Type<TValue> {
    decode(data: Buffer | string, encoding?: DEREncoding): TValue;
    encode(value: TValue, encoding?: DEREncoding): Buffer;
  }

  const RFC5280: {
    CertificateList: Asn1Type<CertificateListDecoded>;
    TBSCertList: Asn1Type<TBSCertList>;
    Certificate: Asn1Type<CertificateDecoded>;
    SubjectPublicKeyInfo: Asn1Type<SubjectPublicKeyInfo>;
  };

  export = RFC5280;
}
